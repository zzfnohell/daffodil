/*

[a b -1] .  [h1a h2a h3a]
            [h1b h2b h3b]
            [h1s h2s h3s]

*/

defstruct(
  bpnn(
    dims,
    hides,
    symbol_matrixes,
    numeric_matrixes,
    transfer_functions,
    error_function))$

bpnn_generate_symbol_matrixes(dims,symbols):=block(
  [i,len,result,tmp],
  len:length(dims),
  result:[],
  for i:1 step 1 while i < len do block(
    tmp:genmatrix(symbols[i],dims[i]+1,dims[i+1]),
    result:endcons(tmp,result)),
  result);

bpnn_caculate_symbol_level_output(input,matrixes,transfer_functions):=block(
  [f],
  local(f),
  maplist(
    lambda([m,f],
      if listp(input) then input:matrix(input)
      else if not matrixp(input) then input:matrix([input]), 
      input:addcol(input,[-1]),
      input:input . m,
      input:f(input)),
    matrixes,
    transfer_functions));

bpnn_caculate_symbol_output(bpnn,input):=block(
  [outputs],
  outputs:bpnn_caculate_symbol_level_output(
    input,
    bpnn@symbol_matrixes,
    bpnn@transfer_functions),
  last(outputs))$

bpnn_caculate_symbol_error(bpnn,input,excepted):=block(
  [outputs],
  outputs:maplist(
    lambda(
      [input],
      bpnn_caculate_symbol_output(bpnn,input)),
    inputs),
  print(excepted),
  bpnn@error_function(excepted,outputs))$

bpnn_evalute(bpnn,expression):=block(
  [equations],
  equations:[],
  maplist(
    lambda(
      [symbol_matrix,numeric_matrix],
      matrixmap(
        lambda(
          [s,n],
          equations:cons(s=n,equations)),
        symbol_matrix,
        numeric_matrix)),
    bpnn@symbol_matrixes,
    bpnn@numeric_matrixes),
  ev(expression,equations))$



bpnn_caculate_numeric_output(bpnn,input):=block(
  [symbol_output],
  symbol_output:bpnn_caculate_symbol_output(bpnn,input),
  bpnn_evalute(bpnn,symbol_output))$

/*
* @brief generate the out function.
* @return the out function expression.
*/
bpnn_generate_outfunction(a,b,n):=block(
  b:matrix(makelist(b,i,1,n)),
  buildq([x,a:a,b:b],a*x + b));

/*initiallize the nn data structure 
*@param dims a list of level's dim,
*/
bpnn_new(dims,hides,transfer_functions,error_function):=block(
  new(
    bpnn(
      dims:dims,
      hides:hides,
      symbol_matrixes:bpnn_generate_symbol_matrixes(dims,hides),
      transfer_functions:transfer_functions,
      error_function:error_function)))$

bpnn_normalize(outputs,interval):=block(
  [xmin,xmax,itmax,itmin],
  itmin:interval[1],
  itmax:interval[2],
  mmin(v):= block(
    [m],
    m:v[1],
    if matrixp(v) then matrixmap(
      lambda(
        [x],
        if x < m then m:x)
      ,v)
    else m:lmin(v),
    m),
  mmax(v):=-mmin(-v),
  xmin:lmin(maplist(mmin,outputs)),
  xmax:lmax(maplist(mmax,outputs)),
  nnormalize(n):= (itmax - itmin) * (n-xmin)/(xmax-xmin) + itmin,
  vnormalize(v):=
  if matrixp(v) then matrixmap(nnormalize,v)
  else maplist(nnormalize,v),
  [maplist(
    vnormalize,
    outputs),
  diff(nnormalize(n),n,1),nnormalize(0)]);
