defstruct(
  test_suite(
    name,
    suite_context,
    failed_cases,
    passed_cases,
    inclusive_cases,
    error_cases))$

test_suite_begin(name,suite_context):=
new(
  test_suite(
    name:name,
    suite_context:suite_context,
    failed_cases:[],
    passed_cases:[],
    inclusive_cases:[],
    error_cases:[]))$

test_suite_end(suite):=
block(
  test_trace("End Testing:",suite@name),
  test_trace("Passed Cases:"),
  maplist(
    lambda(
      [case],
      test_trace(sconcat("[Passed]:[",case@name,"]"))),
    suite@passed_cases),
  test_trace("Failed Cases:"),
  maplist(
    lambda(
      [case],
      test_trace(sconcat("[Failed]:[",case@name,"]"))),
    suite@failed_cases),
  test_trace("Inclusive Cases:"),
  maplist(
    lambda(
      [case],
      test_trace(sconcat("[Inclusive]:[",case@name,"]"))),
    suite@failed_cases),
  test_trace("Error Cases:"),
  maplist(
    lambda(
      [case],
      test_trace(sconcat("[Error]:[",case@name,"]"))),
    suite@error_cases),
  test_trace(
    "Total Passed Cases Count:",
    length(suite@passed_cases)),
  test_trace(
    "Total Failed Cases Count:",
    length(suite@failed_cases)),
  test_trace(
    "Total Inclusive Cases Count:",
    length(suite@inclusive_cases)),
  test_trace(
    "Total Error Cases Count:",
    length(suite@error_cases)),
  if length(suite@error_cases) = 0 then block(
    if length(suite@failed_cases) = 0 then block(
      if length(suite@inclusive_cases) = 0 then block(
        test_trace(sconcat("[",suite@name,"] IS PASSED")))
      else block(
        test_trace(sconcat("[",suite@name,"] IS INCLUSIVE."))))
    else block(
      test_trace(sconcat("[",suite@name,"] IS FAILED."))))
  else block(
    test_trace(sconcat("[",suite@name,"] HAS ERRORS."))))$

test_suite_log(suite,[args])::=buildq([y:args],test_trace(splice(y)));