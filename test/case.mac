defstruct(
  test_case(
    name,
    suite,
    case_context,
    failed_count,
    passed_count,
    inclusive_count,
    has_error,
    has_ended))$

test_case_begin(suite,name,case_context):=
block(
  test_trace(sconcat("Begin test case:[",suite@name,"].","[",name,"]")),
  new(
    test_case(
      name:name,
      suite:suite,
      case_context:case_context,
      failed_count:0,
      passed_count:0,
      inclusive_count:0,
      has_error:false,
      has_ended:false)))$

/*
the form like:
 test_run_case(case,[args])::=block(print(case),
   buildq([y:args],errcatch(splice(y))));
 can be passed.
*/
test_case_run(case,[args])::=buildq([case,y:args],errcatch(splice(y),case@has_ended:true));

test_case_end(case):=
block(
  test_trace("End test case:[",case@suite@name,"].","[",case@name,"]"),
  test_trace("Passed Assertions Count:",case@passed_count),
  test_trace("Inclusive Assertions Count:",case@inclusive_count),
  test_trace("Failed Assertions Count:",case@failed_count),
  if (case@inclusive_count > 0) then
  suite@inclusive_cases:append(suite@inclusive_cases,[case])
  else if (case@failed_count > 0) then
  suite@failed_cases:append(suite@failed_cases,[case])
  else if case@has_ended then
  suite@passed_cases:append(suite@passed_cases,[case])
  else
  error("unkown running status."))$

test_case_assert_trace_compare(case,expected,actual):=
block(
  test_trace("[Actual]:"),
  test_trace(actual),
  test_trace("[Expected]:"),
  test_trace(expected))$

test_case_assert_trace_pass(case,message,expected,actual):=block(
  case@passed_count:case@passed_count + 1,
  test_trace("[Passed]:",message),
  test_case_assert_trace_compare(case,expected,actual))$

test_case_assert_trace_failure(case,message,expected,actual):=block(
  case@failed_count:case@failed_count + 1,
  test_trace("[Failed]:",message),
  test_case_assert_trace_compare(case,expected,actual),
  error("Assertion Failed"))$

test_case_assert_inclusive(case,message):=
block(
  case@inclusive_count:case@inclusive_count + 1,
  test_trace("[Inclusive]:",message),
  error("Assertion Inclusive"))$

test_case_assume_trace_compare(case,expected,actual):=
block(
  test_trace("[Actual]:"),
  test_trace(actual),
  test_trace("[Expected]:"),
  test_trace(expected))$

test_case_assume_trace_pass(case,message,expected,actual):=block(
  case@passed_count:case@passed_count + 1,
  test_trace("[Passed]:",message),
  test_case_assert_trace_compare(case,expected,actual))$

test_case_assume_trace_failure(case,message,expected,actual):=block(
  case@failed_count:case@failed_count + 1,
  test_trace("[Failed]:",message),
  test_case_assert_trace_compare(case,expected,actual),
  error("Assume Failed"))$

test_case_assume_inclusive(case,message):=
block(
  case@inclusive_count:case@inclusive_count + 1,
  test_trace("[Inclusive]:",message),
  error("Assume Inclusive"))$

test_case_assert_equal(case,message,expected,actual):=block(
  if is(actual=expected)
  then test_case_assert_trace_pass(case,message,expected,actual)
  else test_case_assert_trace_failure(case,message,expected,actual))$

test_case_assert_not_equal(case,message,expected,actual):=block(
  if is(actual#expected)
  then test_case_assert_trace_pass(case,message,expected,actual)
  else test_case_assert_trace_failure(case,message,expected,actual))$

test_case_assume_equal(case,message,expected,actual):=block(
  if is(actual=expected)
  then test_case_assume_trace_pass(case,message,expected,actual)
  else test_case_assume_trace_failure(case,message,expected,actual))$

test_case_assume_not_equal(case,message,expected,actual):=block(
  if is(actual#expected)
  then test_case_assume_trace_pass(case,message,expected,actual)
  else test_case_assume_trace_failure(case,message,expected,actual))$

test_case_log(case,item):=test_trace(item)$