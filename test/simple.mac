load_mac("test.mac")$

suite:test_suite_begin("Simple","Suite Context")$

test_suite_log(suite,"Logging in test suite 1","Logging in test suite 2")$

passed_case:test_case_begin(suite,"Passed Case",[])$
test_case_run(
  passed_case,
  test_case_log(passed_case,"Logging in a passed case."),
  test_case_assume_equal(passed_case,"Pass Assume Equal",1,1),
  test_case_assume_not_equal(passed_case,"Pass Assume Not Equal",1,3),
  test_case_assert_equal(passed_case,"Pass Assert Equal",1,1),
  test_case_assert_not_equal(passed_case,"Pass Assert Not Equal",1,3))$
test_case_end(passed_case)$

failed_case:test_case_begin(suite,"Failed Case",[])$
test_case_run(
  failed_case,
  test_case_log(failed_case,"Logging in a failed case."))$

test_case_run(
  failed_case,
  test_case_assume_equal(
    failed_case,
    "Failed Assume Equal",
    1,
    2))$

test_case_run(
  failed_case,
  test_case_assume_not_equal(
    failed_case,
    "Failed Assume Not Equal",
    1,
    1))$

test_case_run(
  failed_case,
  test_case_assert_equal(
    failed_case,
    "Failed Assert Equal",
    1,
    2))$

test_case_run(
  failed_case,
  test_case_assert_not_equal(
    failed_case,
    "Failed Assert Not Equal",
    1,
    1))$

test_case_end(failed_case)$

inclusive_case:test_case_begin(suite,"Inclusive Case",[])$

test_case_run(
  inclusive_case,
  test_case_log(
    inclusive_case,
    "Logging in an inclusive case."),
  test_case_assume_inclusive(inclusive_case,"Inclusive Assume"))$

test_case_run(
  inclusive_case,
  test_case_log(
    inclusive_case,
    "Logging in an inclusive case."),
  test_case_assert_inclusive(inclusive_case,"Inclusive Assertion"))$
test_case_end(inclusive_case)$

test_suite_end(suite)$