/*
LCP(Linear Complementarity Promblem)
v - M . p = q,
v >= 0,p >= 0,
tranpose(v) . p = 0.
where v,p,q are column vectors dims n, M is an (n,n) matrix
*/

defstruct(
  lcp_input(
    M,
    q))$

defstruct(
  lcp_output(v,p))$

lcp_min_index(list):=block(
  [index,i],
  index:1,
  for i:2 step 1 thru length(list) do block(
    if is(list[i] < list[index]) then index:i),
  index)$

lcp_rotate(M,base,r,c):=block(
  [i,scale,size,newM,newBase],
  size:matrix_size(M),
  newM:copymatrix(M),
  newBase:copymatrix(base),
  for i:1 step 1 thru size[1] do block(
    if is(i = r) then block(
      scale:1/newM[i,c],
      newM:matrix_row_multiple(newM,scale,i),
      newBase:matrix_row_multiple(newBase,scale,i))
    else block(
      scale: -newM[i,c] / newM[r,c],
      newM:matrix_row_add(newM,scale,r,i),
      newBase:matrix_row_add(newBase,scale,r,i))),
  [newM,newBase])$

lcp_rotate_row_index(M,base,k):=block(
  [min_row,r,size],
  size:matrix_size(M),
  min_row:[],
  for r:1 step 1 thru size[1] do block(
    if is(M[r,k] > 0) then block(
      if is(min_row=[]) then min_row:r
      else block(
        if is(base[r]/M[r,k] < base[min_row]/M[min_row,k]) then min_row:r))),
  min_row)$

lcp_table_matrix(M):=block(
  [m,n],
  local(f),
  [m,n]:matrix_size(M),
  if is(m#n) then error("M must be an nxn matrix"),
  f[i,j]:=block(
    if is(j<=n) then block(
      if (i = j) then 1
      else 0)
    else if is(j <= 2*n) then -M[i,j-n]
    else -1),
  genmatrix(f,n,2*n+1))$

lcp_solve(input):=block(
  [p0,isFinished,n,table_matrix,base,base_indexes,min_row,baseIn,baseOut,M,q],
  local(fv,fp),
  M:copymatrix(input@M),
  q:copymatrix(input@q),
  [n,n]:matrix_size(M),
  base:q,
  table_matrix:lcp_table_matrix(M),
  base_indexes:makelist(i,i,1,n),
  p0:2*n+1,
  k:2*n+1,
  min_row:lcp_min_index(q),
  [table_matrix,base]:lcp_roate(table_matrix,base,k),
  baseIn:k,
  baseOut:base_indexes[min_row],
  base_indexes[min_row]:baseIn,
  isFinished:false,
  while not isFinished do block(
    k: if (baseOut > n) then baseOut - n else baseOut + n,
    min_row:lcp_rotate_row_index(table_matrix,base,k),
    if (min_row # []) then block(
      [table_matrix,base]:lcp_roate(table_matrix,base,k),
      baseIn:k,
      baseOut:base_indexes[min_row],
      base_indexes[min_row]:baseIn,
      isFinished:is(baseOut=p0))
    else isFinished:true),
  result:new(lcp_output(v:[],p:[])),
  block(
    [i]
    for i:1 thru n do block(
      if base_indexes[i] <= n then result@v[base_indexes[i]]:base[i]
      else result@p[base_indexes[i] - n]:base[i])),
  result@p:transpose(result@p),
  result@v:transpose(result@v),
  result)$